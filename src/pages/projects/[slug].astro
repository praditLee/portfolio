---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

// 1. ฟังก์ชันนี้จะทำงานตอน Build เพื่อบอก Astro ว่าต้องสร้างหน้าอะไรบ้าง
export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { slug: project.slug }, // กำหนด URL เช่น /projects/my-first-project
    props: { project }, // ส่งข้อมูลทั้งหมดของ project นั้นๆ ไปให้หน้านี้
  }));
}

// 2. รับข้อมูลของโปรเจกต์สำหรับหน้านี้โดยเฉพาะ
type Props = { project: CollectionEntry<"projects"> };
const { project } = Astro.props;
const { Content } = await project.render(); // แปลงเนื้อหา Markdown เป็น HTML
---

<MainLayout
  title={project.data.title}
  description={`รายละเอียดผลงาน ${project.data.title} ของประดิษฐ์`}
>
  <div class="project-detail-container">
    <header class="project-header">
      <span class="project-category">{project.data.category}</span>
      <h1>{project.data.title}</h1>
      <div class="tags-container">
        {project.data.tags.map((tag) => <span class="tag">{tag}</span>)}
      </div>
    </header>

    <main class="project-content">
      <Content />
    </main>

    {
      project.data.gallery && project.data.gallery.length > 0 && (
        <section class="project-gallery">
          <h2>Gallery</h2>
          <div class="gallery-grid">
            {project.data.gallery.map((image) => (
              <a href={image} class="glightbox" data-gallery={project.slug}>
                <img src={image} alt={`ภาพประกอบของ ${project.data.title}`} />
              </a>
            ))}
          </div>
        </section>
      )
    }
  </div>
</MainLayout>

<style>
  .project-detail-container {
    max-width: 800px;
    margin: 0 auto;
    padding: var(--spacing-lg) var(--spacing-md);
  }
  .project-header {
    text-align: center;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
  }
  .project-category {
    font-weight: 600;
    color: var(--color-text-secondary);
  }
  .project-header h1 {
    margin: var(--spacing-xs) 0 var(--spacing-md);
  }
  .tags-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .tag {
    background-color: var(--color-surface);
    color: var(--color-text-secondary);
    font-size: 0.85rem;
    padding: 0.25rem 0.75rem;
    border-radius: 999px;
  }
  .project-content {
    line-height: 1.8;
  }
  .project-content :global(a) {
    /* ทำให้ลิงก์ในเนื้อหามีขีดเส้นใต้ */
    text-decoration: underline;
  }
  .project-gallery {
    margin-top: var(--spacing-xl);
  }
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-sm);
  }
  .gallery-grid img {
    width: 100%;
    height: auto;
    border-radius: var(--border-radius);
  }
</style>

<script>
  // Import และเรียกใช้ Glightbox สำหรับหน้านี้โดยเฉพาะ
  import GLightbox from "glightbox";
  const lightbox = GLightbox({
    selector: ".glightbox",
  });
</script>
